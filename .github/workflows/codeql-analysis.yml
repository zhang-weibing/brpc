name: "CodeQL Feature Extraction"

on:
  workflow_dispatch:

jobs:
  extract-features:
    runs-on: ubuntu-latest
    
    container:
      image: ubuntu:20.04
    
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    # 步骤1: 检出代码
    - name: Checkout target source code
      uses: actions/checkout@v4
      with:
        ref: '50eed9b008e7eff012e788a8a328901f68373579'

    # 步骤2: 动态创建CodeQL查询文件
    - name: Create CodeQL Query File
      run: |
        mkdir -p ./.github/codeql-queries
        cat <<'EOF' > ./.github/codeql-queries/FeatureExtraction.ql
        /**
         * @name Extract Features for Cohesion Analysis (v2)
         * @description This query extracts all referenced symbols for each source file.
         * @kind table
         */
        import cpp

        from File f, Locatable ref, string featureType
        where
          (f.getExtension() = "cpp" or f.getExtension() = "h" or f.getExtension() = "hpp") and
          f.getRelativePath().matches("src/brpc/%") and
          (
            exists(Call c | c.getLocation().getFile() = f and ref = c.getTarget() and featureType = "FunctionCall") or
            exists(VariableAccess va | va.getLocation().getFile() = f and ref = va.getTarget() and featureType = "VariableAccess") or
            exists(TypeAccess ta | ta.getLocation().getFile() = f and ref = ta.getType() and featureType = "TypeAccess")
          ) and
          ref.toString() != ""
        select f.getRelativePath() as file, featureType, ref.toString() as feature
        EOF

    # 步骤3: 初始化CodeQL
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: cpp
        queries: ./.github/codeql-queries/FeatureExtraction.ql

    # ========================== 最终核心修改点 1 ==========================
    # 步骤4: (新) 设置CodeQL命令行工具，确保'codeql'命令可用
    - name: Set up CodeQL CLI
      uses: github/codeql-action/setup-cli@v3
    # =====================================================================

    # 步骤5: 在容器内安装依赖
    - name: Install dependencies in container
      run: |
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y git ca-certificates python3 python3-pip
        apt-get install -y build-essential cmake libssl-dev protobuf-compiler libgflags-dev libleveldb-dev libprotobuf-dev libprotoc-dev

    # 步骤6: 编译项目
    - name: Build project
      run: |
        cmake .
        make -j2

    # 步骤7: 运行分析，生成.bqrs结果
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        output: results
        
    # ========================== 最终核心修改点 2 ==========================
    # 步骤8: 使用现在可用的'codeql'命令直接解码结果
    - name: Decode BQRS results to CSV
      # 现在可以直接调用 'codeql' 命令了
      run: codeql bqrs decode --format=csv --output=features.csv results/cpp/custom-queries/FeatureExtraction.bqrs

    # 步骤9: 将CSV转换为最终的JSON格式
    - name: Convert CSV to JSON
      run: |
        cat <<'PY_EOF' > csv_to_json.py
        import csv
        import json
        import sys
        from collections import defaultdict

        def csv_to_json(csv_path, json_path):
            features_by_file = defaultdict(set)
            try:
                with open(csv_path, 'r', newline='', encoding='utf-8') as csvfile:
                    reader = csv.reader(csvfile)
                    next(reader, None) # Skip header
                    for row in reader:
                        if len(row) == 3:
                            file, _, feature = row
                            features_by_file[file].add(feature)
            except FileNotFoundError:
                print(f"Warning: CSV file '{csv_path}' not found. Output will be empty.")
            
            output_dict = {file: sorted(list(features)) for file, features in features_by_file.items()}
            
            with open(json_path, 'w', encoding='utf-8') as jsonfile:
                json.dump(output_dict, jsonfile, indent=2, ensure_ascii=False)
            
            print(f"Conversion successful. Processed {len(output_dict)} files.")
        
        if __name__ == "__main__":
            csv_to_json(sys.argv[1], sys.argv[2])
        PY_EOF

        python3 csv_to_json.py features.csv extracted_features.json
        
    # 步骤10: 上传最终的JSON文件
    - name: Upload final JSON artifact
      uses: actions/upload-artifact@v4
      with:
        name: extracted-features-json
        path: extracted_features.json
    # ====================================================================
