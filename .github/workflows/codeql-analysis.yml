name: "CodeQL Feature Extraction"

on:
  workflow_dispatch:

jobs:
  extract-features:
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    # 步骤1: 只检出想要分析的那个旧的commit版本
    - name: Checkout target source code
      uses: actions/checkout@v4
      with:
        ref: '50eed9b008e7eff012e788a8a328901f68373579'

    # 步骤2: (新) 动态创建CodeQL查询文件
    # 我们把查询内容直接写在这里，避免了文件不存在的问题
    - name: Create CodeQL Query File
      run: |
        mkdir -p ./.github/codeql-queries
        # 使用'cat'和'EOF'来将多行文本写入文件
        cat <<'EOF' > ./.github/codeql-queries/FeatureExtraction.ql
        /**
         * @name Extract Features for Cohesion Analysis
         * @description This query extracts all referenced symbols (functions, variables, types) for each source file.
         * @kind table
         */
        import cpp

        string getQualifiedName(Element e) {
          e.(Function).hasGlobalOrStdName() and result = e.(Function).getQualifiedName()
          or
          e.(Variable).hasGlobalOrStdName() and result = e.(Variable).getQualified_name()
          or
          result = e.(Type).getName()
        }

        from File f, Element ref, string featureType
        where
          (f.getExtension() = "cpp" or f.getExtension() = "h" or f.getExtension() = "hpp") and
          f.getRelativePath().matches("src/brpc/%") and
          (
            exists(Call c | c.getEnclosingFunction().getFile() = f and ref = c.getTarget() and featureType = "FunctionCall")
            or
            exists(VariableAccess va | va.getEnclosingFunction().getFile() = f and ref = va.getTarget() and featureType = "VariableAccess")
            or
            exists(TypeAccess ta | ta.getEnclosingFunction().getFile() = f and ref = ta.getType() and featureType = "TypeAccess")
          )
        select f.getRelativePath() as file, featureType, getQualifiedName(ref) as feature
        EOF

    # 步骤3: 初始化CodeQL
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: cpp
        # 直接使用我们刚刚创建的查询文件路径
        queries: ./.github/codeql-queries/FeatureExtraction.ql

    # 步骤4: 安装所有依赖，包括指定版本的编译器
    - name: Install all dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-11 g++-11 build-essential cmake libssl-dev protobuf-compiler libgflags-dev libleveldb-dev libprotobuf-dev libprotoc-dev

    # 步骤5: 编译项目，并在命令前直接指定编译器
    - name: Build project
      # 直接在命令前设置环境变量，这是最可靠的方式
      run: |
        export CC=/usr/bin/gcc-11
        export CXX=/usr/bin/g++-11
        cmake .
        make -j2

    # 步骤6: 运行分析
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        output: ../results
        format: csv

    # 步骤7: 上传结果
    - name: Upload results as an artifact
      uses: actions/upload-artifact@v4
      with:
        name: codeql-feature-results
        path: ../results
