name: "CodeQL Feature Extraction"

on:
  workflow_dispatch:

jobs:
  extract-features:
    runs-on: ubuntu-latest
    
    # 我们不再需要容器，因为autobuild会在一个预设的、兼容的环境中运行
    
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    # 步骤1: 检出代码
    - name: Checkout target source code
      uses: actions/checkout@v4
      with:
        ref: '50eed9b008e7eff012e788a8a328901f68373579'

    # 步骤2: 动态创建CodeQL查询文件
    - name: Create CodeQL Query File
      run: |
        mkdir -p ./.github/codeql-queries
        cat <<'EOF' > ./.github/codeql-queries/FeatureExtraction.ql
        /**
         * @name Extract Features for Cohesion Analysis (v2)
         * @description This query extracts all referenced symbols for each source file.
         * @kind table
         */
        import cpp

        from File f, Locatable ref, string featureType
        where
          (f.getExtension() = "cpp" or f.getExtension() = "h" or f.getExtension() = "hpp") and
          f.getRelativePath().matches("src/brpc/%") and
          (
            exists(Call c | c.getLocation().getFile() = f and ref = c.getTarget() and featureType = "FunctionCall") or
            exists(VariableAccess va | va.getLocation().getFile() = f and ref = va.getTarget() and featureType = "VariableAccess") or
            exists(TypeAccess ta | ta.getLocation().getFile() = f and ref = ta.getType() and featureType = "TypeAccess")
          ) and
          ref.toString() != ""
        select f.getRelativePath() as file, featureType, ref.toString() as feature
        EOF

    # 步骤3: 初始化CodeQL
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: cpp
        queries: ./.github/codeql-queries/FeatureExtraction.ql
        
    # ========================== 最终核心修改点 ==========================
    # 步骤4: (新) 使用Autobuild让CodeQL自动处理编译
    # 我们不再需要手动安装依赖和运行cmake/make
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    # 步骤5: 运行分析
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        output: results

    # 步骤6: 使用官方环境变量$CODEQL_CLI解码结果
    - name: Decode BQRS results to CSV
      run: ${{ runner.tool_cache }}/CodeQL/0.0.0-20240110/x64/codeql/codeql bqrs decode --format=csv --output=features.csv results/cpp.bqrs

    # 步骤7: 将CSV转换为最终的JSON格式
    - name: Convert CSV to JSON
      run: |
        cat <<'PY_EOF' > csv_to_json.py
        import csv, json, sys
        from collections import defaultdict
        def csv_to_json(csv_path, json_path):
            features_by_file = defaultdict(set)
            try:
                with open(csv_path, 'r', newline='', encoding='utf-8') as f:
                    r = csv.reader(f); next(r, None)
                    for row in r:
                        if len(row)==3: features_by_file[row[0]].add(row[2])
            except FileNotFoundError: print(f"W: CSV '{csv_path}' not found.")
            out = {f: sorted(list(fs)) for f, fs in features_by_file.items()}
            with open(json_path, 'w', encoding='utf-8') as f: json.dump(out, f, indent=2)
            print(f"OK: Processed {len(out)} files.")
        if __name__ == "__main__": csv_to_json(sys.argv[1], sys.argv[2])
        PY_EOF
        python3 csv_to_json.py features.csv extracted_features.json
        
    # 步骤8: 上传最终的JSON文件
    - name: Upload final JSON artifact
      uses: actions/upload-artifact@v4
      with:
        name: extracted-features-json
        path: extracted_features.json
    # ====================================================================
