name: "CodeQL Feature Extraction (Final Ultimate v2)"

on:
  workflow_dispatch:

jobs:
  extract-features:
    runs-on: ubuntu-latest
    
    container:
      image: ubuntu:20.04
    
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    # 步骤1: 检出代码
    - name: Checkout target source code
      uses: actions/checkout@v4
      with:
        ref: '50eed9b008e7eff012e788a8a328901f68373579'

    # 步骤2: 动态创建CodeQL查询文件
    - name: Create CodeQL Query File
      run: |
        mkdir -p ./.github/codeql-queries
        cat <<'EOF' > ./.github/codeql-queries/FeatureExtraction.ql
        /**
         * @name Extract Features for Cohesion Analysis (v2)
         * @description This query extracts all referenced symbols for each source file.
         * @kind table
         */
        import cpp

        from File f, Locatable ref, string featureType
        where
          (f.getExtension() = "cpp" or f.getExtension() = "h" or f.getExtension() = "hpp") and
          f.getRelativePath().matches("src/brpc/%") and
          (
            exists(Call c | c.getLocation().getFile() = f and ref = c.getTarget() and featureType = "FunctionCall") or
            exists(VariableAccess va | va.getLocation().getFile() = f and ref = va.getTarget() and featureType = "VariableAccess") or
            exists(TypeAccess ta | ta.getLocation().getFile() = f and ref = ta.getType() and featureType = "TypeAccess")
          ) and
          ref.toString() != ""
        select f.getRelativePath() as file, featureType, ref.toString() as feature
        EOF

    # ========================== 最终核心修改点 1 ==========================
    # 步骤3: 初始化CodeQL，并明确指定数据库的创建位置
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: cpp
        queries: ./.github/codeql-queries/FeatureExtraction.ql
        # 我们给数据库一个明确的名字和位置
        db-location: ./codeql-database

    # 步骤4: 在容器内安装依赖
    - name: Install dependencies and CodeQL CLI in container
      run: |
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y git ca-certificates wget unzip python3 python3-pip
        apt-get install -y build-essential cmake libssl-dev protobuf-compiler libgflags-dev libleveldb-dev libprotobuf-dev libprotoc-dev

    # 步骤5: 手动安装并授权CodeQL CLI
    - name: Install and permission CodeQL CLI
      run: |
        wget https://github.com/github/codeql-cli-binaries/releases/download/v2.16.2/codeql-linux64.zip
        unzip codeql-linux64.zip
        mv codeql /usr/local/share/
        chmod +x /usr/local/share/codeql/codeql

    # 步骤6: 编译项目
    - name: Build project
      run: |
        cmake .
        make -j2

    # ========================== 最终核心修改点 2 ==========================
    # 步骤7: 运行分析，并明确告诉它要分析哪个数据库
    - name: Perform CodeQL Analysis
      run: /usr/local/share/codeql/codeql database analyze ./codeql-database ./.github/codeql-queries/FeatureExtraction.ql --format=sarif-latest --output=results/cpp.sarif

    # 步骤8: (新) 增加一个调试步骤，检查结果文件是否生成
    - name: Check for generated files
      run: ls -R results
        
    # 步骤9: 将SARIF转换为最终的JSON格式 (如果需要的话)
    # 我们可以先跳过这一步，确保能拿到SARIF文件
    # ...

    # 步骤10: 上传整个results目录以供调试
    - name: Upload analysis results
      uses: actions/upload-artifact@v4
      with:
        name: codeql-raw-results
        path: results
    # ====================================================================
