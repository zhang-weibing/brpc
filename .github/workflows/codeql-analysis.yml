name: "CodeQL Feature Extraction (Simplified)"

on:
  workflow_dispatch:

jobs:
  extract-features:
    runs-on: ubuntu-latest
    
    container:
      image: ubuntu:20.04
    
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    # 步骤1: 检出代码。这次我们检出master分支，因为我们的配置文件在上面。
    # 然后我们会再检出旧代码。
    - name: Checkout master branch to get workflow files
      uses: actions/checkout@v4
      with:
        # 明确检出包含配置文件的master分支
        ref: 'master' 
        path: 'main'

    - name: Checkout target source code
      uses: actions/checkout@v4
      with:
        # 检出你想要分析的旧commit
        ref: '50eed9b008e7eff012e788a8a328901f68373579'
        path: 'source'

    # 步骤2: 安装所有依赖
    - name: Install dependencies and CodeQL CLI
      run: |
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y git ca-certificates wget unzip python3 python3-pip
        apt-get install -y build-essential cmake libssl-dev protobuf-compiler libgflags-dev libleveldb-dev libprotobuf-dev libprotoc-dev
        wget https://github.com/github/codeql-cli-binaries/releases/download/v2.16.2/codeql-linux64.zip
        unzip codeql-linux64.zip
        mv codeql /usr/local/share/
        chmod +x /usr/local/share/codeql/codeql

    # 步骤3: 创建构建脚本
    - name: Create build script
      working-directory: ./source # 切换到源代码目录
      run: |
        cat <<'EOF' > build.sh
        #!/bin/bash
        set -e
        cmake .
        make -j2
        EOF
        chmod +x build.sh

    # 步骤4: 创建CodeQL数据库
    - name: Create CodeQL database
      run: |
        /usr/local/share/codeql/codeql database create ./codeql-database --language=cpp --source-root=./source --command="./source/build.sh"

    # 步骤5: 升级数据库
    - name: Upgrade CodeQL database
      run: /usr/local/share/codeql/codeql database upgrade ./codeql-database

    # 步骤6: 安装查询依赖包
    - name: Install CodeQL packs
      run: /usr/local/share/codeql/codeql pack install ./main/.github/codeql-queries

    # 步骤7: 运行分析
    - name: Perform CodeQL Analysis and decode results
      run: |
        /usr/local/share/codeql/codeql database analyze ./codeql-database ./main/.github/codeql-queries --format=csv --output=features.csv

    # 步骤8: 将CSV转换为JSON
    - name: Convert CSV to JSON
      run: |
        cat <<'PY_EOF' > csv_to_json.py
        import csv, json, sys
        from collections import defaultdict
        def csv_to_json(csv_path, json_path):
            features_by_file = defaultdict(set)
            try:
                with open(csv_path, 'r', newline='', encoding='utf-8') as f:
                    r = csv.reader(f); next(r, None)
                    for row in r:
                        if len(row)==3: features_by_file[row[0]].add(row[2])
            except FileNotFoundError: print(f"W: CSV '{csv_path}' not found.")
            out = {f: sorted(list(fs)) for f, fs in features_by_file.items()}
            with open(json_path, 'w', encoding='utf-8') as f: json.dump(out, f, indent=2)
            print(f"OK: Processed {len(out)} files.")
        if __name__ == "__main__": csv_to_json(sys.argv[1], sys.argv[2])
        PY_EOF
        python3 csv_to_json.py features.csv extracted_features.json
        
    # 步骤9: 上传JSON文件
    - name: Upload final JSON artifact
      uses: actions/upload-artifact@v4
      with:
        name: extracted-features-json
        path: extracted_features.json
