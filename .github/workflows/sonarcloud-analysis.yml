# 文件路径: .github/workflows/sonarcloud-analysis.yml
# 最终方案 - 分离编译和分析，手动准备工具

name: SonarCloud C++ Analysis

on:
  workflow_dispatch:

jobs:
  analysis:
    name: Analysis
    runs-on: ubuntu-latest

    steps:
      # 步骤1: 检出代码
      - name: Checkout target source code
        uses: actions/checkout@v4
        with:
          ref: '50eed9b008e7eff012e788a8a328901f68373579'
          fetch-depth: 0

      # 步骤2: 安装所有依赖
      - name: Install all dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libssl-dev protobuf-compiler libgflags-dev libleveldb-dev libprotobuf-dev libprotoc-dev

      # 步骤3: 手动下载并准备 build-wrapper 和 sonar-scanner
      - name: Download SonarCloud tools
        run: |
          # 下载 build-wrapper 并添加到 PATH
          curl -sSLo build-wrapper.zip "https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip"
          unzip -o build-wrapper.zip
          echo "$(pwd)/build-wrapper-linux-x86" >> $GITHUB_PATH
          
          # 下载 sonar-scanner 并添加到 PATH
          curl -sSLo sonar-scanner.zip "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-latest-linux.zip"
          unzip -o sonar-scanner.zip
          SCANNER_DIR=$(find . -maxdepth 1 -type d -name "sonar-scanner-*-linux" -print | head -n 1)
          echo "$SCANNER_DIR/bin" >> $GITHUB_PATH

      # 步骤4: 使用 build-wrapper 运行编译
      - name: Build with build-wrapper
        run: |
          build-wrapper-linux-x86-64 --out-dir bw-output cmake .
          build-wrapper-linux-x86-64 --out-dir bw-output make -j2
      
      # 步骤5: 运行 SonarCloud 分析
      - name: Analyze with SonarScanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.organization=zhang-weibing \
            -Dsonar.projectKey=zhang-weibing_brpc \
            -Dsonar.cfamily.build-wrapper-output=bw-output
